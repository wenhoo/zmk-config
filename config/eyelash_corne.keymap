#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include "./key-lable.h"

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};


/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
          compatible = "zmk,combos";
          combo_esc {
              timeout-ms = <50>;
              key-positions = <2 3>;
              bindings = <&kp ESC>;
          };

          combo_bspc {
              timeout-ms = <50>;
              key-positions = <8 9>;
              bindings = <&kp BSPC>;
          };

          combo_del {
              timeout-ms = <50>;
              key-positions = <9 10>;
              bindings = <&kp DEL>;
          };

          combo_left {
              timeout-ms = <50>;
              key-positions = <23 24>;
              bindings = <&kp LBKT>;
          };

          combo_right {
              timeout-ms = <50>;
              key-positions = <24 25>;
              bindings = <&kp RBKT>;
          };

          combo_grave {
              timeout-ms = <50>;
              key-positions = <2 15>;
              bindings = <&kp GRAVE>;
          };

          combo_r_esc {
              timeout-ms = <50>;
              key-positions = <7 8>;
              bindings = <&kp ESC>;
          };

    };

    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        mhsk: mode_hold_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            #binding-cells = <2>;
            bindings = <&mo>, <&sk>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&mhsk 2 LG(LS(LA(LCTRL)))       &kp Q  &kp W      &kp E          &kp R        &kp T            &none                &kp Y        &kp U  &kp I      &kp O    &kp P     &lt 1 BSPC
&mt LALT  ESC   &kp A  &kp S      &kp D          &kp F        &kp G        &none &none &none         &kp H   &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&mt LSHFT TAB   &kp Z  &kp X      &kp C          &kp V        &kp B        &none &none              &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                                 &kp LGUI     &lt 1 SPACE    &kp LCTRL                                          &lt 2 ENTER      &td0       &kp RALT
            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUM&SYM";
            bindings = <
&kp C_VOL_UP  &kp BSPC    &kp N7    &kp N8        &kp N9  &kp C_PREV              &none            &kp PLUS  &kp LPAR    &kp HASH   &kp RPAR   &kp GRAVE    &kp TILDE
&kp C_VOL_DN  &kp SPACE   &kp N4    &kp N5        &kp N6        &kp C_PP     &none &none &none     &kp MINUS  &kp CARET   &kp PRCNT  &kp DLLR  &kp BSLH  &kp AMPS
&kp C_MUTE  &kp N0         &kp N1    &kp N2        &kp N3        &kp C_NEXT      &none &none       &kp UNDER  &kp AT  &kp ASTRK  &kp EQUAL  &kp EXCL   &kp PIPE
                                         &trans        &trans        &trans                                                         &trans      &trans      &trans          
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "Fn";
            bindings = <
&trans  &kp F12  &kp F7      &kp F8          &kp F9        &trans           &none              &kp LG(SPACE) &kp C_BRI_DEC  &kp C_BRI_INC   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &kp F11  &kp F4      &kp F5          &kp F6        &trans     &none &none &none        &kp LEFT     &kp DOWN     &kp UP     &kp RIGHT    &kp RGUI  &kp UNDER
&trans  &kp F10  &kp F1      &kp F2          &kp F3        &trans     &trans &none             &kp HOME  &kp PG_DN   &kp PG_UP   &kp END  &kp PLUS   &kp RBRC
                                    &trans  &trans     &trans                                                  &trans     &trans     &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "SYS";
            bindings = <
&studio_unlock   &kp F1      &kp F2      &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans  &trans      &mkp LCLK   &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans  &sys_reset  &trans      &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                &trans      &trans      &trans                                                                   &trans       &trans     &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
